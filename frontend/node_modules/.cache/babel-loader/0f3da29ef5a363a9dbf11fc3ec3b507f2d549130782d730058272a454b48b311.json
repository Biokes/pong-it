{"ast":null,"code":"class SoundManager {\n  constructor() {\n    this.hitSound = new Audio('/sounds/hit2.mp3');\n    this.scoreSound = new Audio('/sounds/score2.mp3');\n    this.loadSound = new Audio('/sounds/load2.mp3');\n    this.gameOverSound = new Audio('/sounds/gameover3.mp3');\n    this.introSound = new Audio('/sounds/intro2.mp3');\n    this.audioContext = null;\n    this.oscillators = [];\n    this.gainNodes = [];\n    this.rhythmIntervals = [];\n    this.defaultGenome = \"aslkajd asklja lskj ask aslkj aldka lskdjaslkdj \";\n    this.isGenomeAudioPlaying = false;\n    this.initialized = false;\n  }\n  init() {\n    console.log('Initializing SoundManager');\n    if (this.initialized) {\n      console.log('Already initialized');\n      return Promise.resolve();\n    }\n    return new Promise(resolve => {\n      try {\n        // Create audio context if it doesn't exist\n        if (!this.audioContext) {\n          console.log('Creating new AudioContext');\n          this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        }\n        if (this.audioContext.state === 'suspended') {\n          console.log('AudioContext suspended, attempting to resume');\n          this.audioContext.resume().catch(e => {\n            console.warn('Could not resume audio context:', e);\n          });\n        }\n        console.log('Audio context created:', this.audioContext.state);\n\n        // Load audio files silently without playing them\n        console.log('Loading audio files');\n\n        // This prevents the \"play() request was interrupted\" error\n        const silentBuffer = this.audioContext.createBuffer(1, 1, 22050);\n        const silentSource = this.audioContext.createBufferSource();\n        silentSource.buffer = silentBuffer;\n        silentSource.connect(this.audioContext.destination);\n        silentSource.start();\n        this.initialized = true;\n        console.log('Sound Manager initialized successfully');\n        resolve();\n      } catch (e) {\n        console.error('Failed to initialize audio context:', e);\n        this.initialized = false; // Mark as not initialized so we can try again\n        resolve(); // Resolve anyway to avoid blocking\n      }\n    });\n  }\n  ensureAudioContext() {\n    console.log('Ensuring audio context');\n    if (!this.audioContext) {\n      try {\n        console.log('Creating new AudioContext');\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      } catch (e) {\n        console.error('Failed to create audio context:', e);\n        return null;\n      }\n    }\n    if (this.audioContext.state === 'suspended') {\n      console.log('AudioContext suspended, attempting to resume');\n      this.audioContext.resume().catch(e => {\n        console.error('Failed to resume audio context:', e);\n      });\n    }\n    console.log('Audio context state:', this.audioContext.state);\n    return this.audioContext;\n  }\n  async playWithErrorHandling(playFunction, fallbackMessage = '') {\n    try {\n      if (!this.initialized) {\n        await this.init();\n      }\n\n      // Ensure audio context is running\n      this.ensureAudioContext();\n      await playFunction();\n    } catch (error) {\n      console.warn(`Sound playback failed: ${fallbackMessage}`, error);\n    }\n  }\n  startBackgroundMusic() {\n    this.startGenomeAudio(this.defaultGenome);\n  }\n  startGenomeAudio(genome = null) {\n    console.log('Starting genome audio, initialized:', this.initialized);\n    if (!this.initialized) {\n      console.log('Initializing sound manager before playing genome audio');\n      return this.init().then(() => {\n        this.isGenomeAudioPlaying = true; // Make sure to set this flag\n        return this.createRhythmicSound(genome || this.defaultGenome);\n      });\n    }\n    this.isGenomeAudioPlaying = true; // Explicitly set the flag\n    return this.createRhythmicSound(genome || this.defaultGenome);\n  }\n\n  // Control maximum playback duration\n  setMaxPlaybackDuration(durationMs = 30000, shouldAutoStop = false) {\n    // Stop any existing timeout\n    if (this.maxDurationTimeout) {\n      clearTimeout(this.maxDurationTimeout);\n      this.maxDurationTimeout = null;\n    }\n\n    // Only set the timeout if shouldAutoStop is true\n    if (shouldAutoStop) {\n      console.log(`Setting maximum playback duration: ${durationMs}ms`);\n      this.maxDurationTimeout = setTimeout(() => {\n        console.log(`Maximum playback duration (${durationMs}ms) reached, stopping sounds`);\n        this.stopAll();\n      }, durationMs);\n    } else {\n      console.log('Continuous playback enabled - no automatic stop');\n    }\n  }\n  startSimpleGenomeAudio(genome = null) {\n    this.isGenomeAudioPlaying = true; // Make sure the flag is set\n    return this.createRhythmicSound(genome || this.defaultGenome);\n  }\n  createRhythmicSound(genome) {\n    try {\n      this.stopAll();\n      console.log('AudioContext before ensuring:', this.audioContext ? this.audioContext.state : 'none');\n      if (!this.ensureAudioContext()) {\n        console.error('Failed to ensure audio context');\n        return;\n      }\n      console.log('AudioContext after ensuring:', this.audioContext.state);\n\n      // Make sure we set this flag early\n      this.isGenomeAudioPlaying = true;\n      console.log('Creating rhythmic sound with genome:', genome);\n      const baseFreq = 80 + Math.abs(this.hashCode(genome)) % 80;\n      console.log('Base frequency:', baseFreq);\n      const tempoFactor = 0.3 + Math.abs(this.hashCode(genome.substring(0, 10))) % 0.2;\n      const beatInterval = 300 * tempoFactor;\n      console.log('Beat interval:', beatInterval);\n      const mainSequence = this.generateLongerSequence(genome, 16);\n      const bassSequence = this.generateLongerSequence(genome.split('').reverse().join(''), 12);\n      const accentSequence = this.generateLongerSequence(genome.substring(5) + genome.substring(0, 5), 10);\n      console.log('Main sequence length:', mainSequence.length);\n      console.log('Bass sequence length:', bassSequence.length);\n      console.log('Accent sequence length:', accentSequence.length);\n      const patternLength = this.lcm(this.lcm(mainSequence.length, bassSequence.length), accentSequence.length);\n      console.log('Total pattern length (beats):', patternLength);\n      console.log('Pattern duration (seconds):', patternLength * beatInterval / 1000);\n\n      // Set maximum duration for the generated sound but DON'T auto-stop\n      // Pass false as second parameter to indicate no auto-stop\n      this.setMaxPlaybackDuration(30000, false);\n      let currentBeat = 0;\n      const mainRhythmInterval = setInterval(() => {\n        // Debug log every 10 beats\n        if (currentBeat % 10 === 0) {\n          console.log('Main rhythm beat:', currentBeat, 'isPlaying:', this.isGenomeAudioPlaying);\n        }\n        if (!this.isGenomeAudioPlaying) {\n          console.log('Stopping main rhythm - isPlaying flag false');\n          clearInterval(mainRhythmInterval);\n          return;\n        }\n        const mainIndex = currentBeat % mainSequence.length;\n        const mainNote = mainSequence[mainIndex];\n        if (mainNote.volume > 0) {\n          this.playNote(baseFreq * mainNote.frequency, mainNote.duration * beatInterval * 0.85, mainNote.volume, 'triangle');\n        }\n        currentBeat++;\n      }, beatInterval);\n      let bassBeat = 0;\n      const bassRhythmInterval = setInterval(() => {\n        if (!this.isGenomeAudioPlaying) {\n          clearInterval(bassRhythmInterval);\n          return;\n        }\n        const bassIndex = bassBeat % bassSequence.length;\n        const bassNote = bassSequence[bassIndex];\n        if (bassNote.volume > 0) {\n          this.playNote(baseFreq * 0.75 * bassNote.frequency, bassNote.duration * beatInterval * 0.9, bassNote.volume * 1.2, 'sine');\n        }\n        bassBeat++;\n      }, beatInterval * 1.5);\n      let accentBeat = 0;\n      const accentRhythmInterval = setInterval(() => {\n        if (!this.isGenomeAudioPlaying) {\n          clearInterval(accentRhythmInterval);\n          return;\n        }\n        const accentIndex = accentBeat % accentSequence.length;\n        const accentNote = accentSequence[accentIndex];\n        if (accentNote.volume > 0.15) {\n          this.playNote(baseFreq * 1.5 * accentNote.frequency, accentNote.duration * beatInterval * 0.4, accentNote.volume * 0.9, 'square');\n        }\n        accentBeat++;\n      }, beatInterval * 2);\n      this.rhythmIntervals.push(mainRhythmInterval, bassRhythmInterval, accentRhythmInterval);\n      this.createBassDrone(baseFreq * 0.5);\n      this.createRhythmicPercussion(beatInterval, genome, baseFreq);\n      console.log('Faster rhythmic genome audio started successfully');\n    } catch (error) {\n      console.error('Error creating rhythmic sound:', error);\n    }\n  }\n  generateLongerSequence(genome, length = 16) {\n    const sequence = [];\n    const possibleFrequencies = [0.5, 0.66, 0.75, 0.8, 1, 1.125, 1.25, 1.33, 1.5];\n    let extendedGenome = genome;\n    while (extendedGenome.length < length * 3) {\n      extendedGenome += genome;\n    }\n    for (let i = 0; i < length * 2; i += 2) {\n      if (i + 1 >= extendedGenome.length) break;\n      const char1 = extendedGenome.charCodeAt(i % extendedGenome.length);\n      const char2 = extendedGenome.charCodeAt((i + 1) % extendedGenome.length);\n      const char3 = extendedGenome.charCodeAt((i + 2) % extendedGenome.length);\n      const freqIndex = char1 % possibleFrequencies.length;\n      const frequency = possibleFrequencies[freqIndex];\n      const durationOptions = [0.5, 1, 1.5];\n      const durIndex = char2 % durationOptions.length;\n      const duration = durationOptions[durIndex];\n      const volume = char3 % 100 < 15 ? 0 : 0.1 + (char1 + char2) % 25 / 100;\n      sequence.push({\n        frequency,\n        duration,\n        volume\n      });\n      if (sequence.length >= length) break;\n    }\n    while (sequence.length < length) {\n      sequence.push({\n        frequency: 1,\n        duration: 1,\n        volume: 0.2\n      });\n    }\n    return sequence;\n  }\n  playNote(frequency, duration, volume, waveType = 'triangle') {\n    try {\n      if (!this.audioContext) {\n        console.error('No audio context available for playNote');\n        return;\n      }\n\n      // Limit maximum duration of any single note to 3 seconds, but don't go below 100ms\n      const maxDuration = Math.min(3000, Math.max(100, duration));\n\n      // Use safer volume levels\n      const safeVolume = Math.min(0.4, Math.max(0.05, volume));\n      const osc = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n      osc.type = waveType;\n      osc.frequency.value = frequency;\n\n      // Simpler gain envelope\n      gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(safeVolume, this.audioContext.currentTime + 0.01);\n      gainNode.gain.setValueAtTime(safeVolume, this.audioContext.currentTime + (maxDuration - 50) / 1000);\n      gainNode.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + maxDuration / 1000);\n      osc.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      console.log(`Playing note: freq=${frequency.toFixed(1)}, dur=${maxDuration}ms, vol=${safeVolume.toFixed(2)}`);\n      const startTime = this.audioContext.currentTime;\n      const stopTime = startTime + (maxDuration + 50) / 1000;\n      osc.start(startTime);\n      osc.stop(stopTime);\n      osc.onended = () => {\n        try {\n          osc.disconnect();\n          gainNode.disconnect();\n        } catch (err) {\n          // Already disconnected, ignore\n        }\n      };\n      return {\n        osc,\n        gainNode\n      };\n    } catch (error) {\n      console.error('Error playing note:', error);\n      return null;\n    }\n  }\n  createBassDrone(frequency) {\n    try {\n      if (!this.audioContext) return;\n      const osc = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n      osc.type = 'sine';\n      osc.frequency.value = frequency;\n\n      // Start with low gain and ramp up for smoother transition\n      gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.06, this.audioContext.currentTime + 1);\n\n      // Keep constant volume after initial ramp-up instead of auto-stopping\n      gainNode.gain.setValueAtTime(0.06, this.audioContext.currentTime + 20);\n      osc.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      osc.start();\n\n      // Don't schedule automatic stop - will be stopped when game ends\n\n      this.oscillators.push(osc);\n      this.gainNodes.push(gainNode);\n      console.log('Bass drone created at frequency:', frequency);\n    } catch (error) {\n      console.error('Error creating bass drone:', error);\n    }\n  }\n  createRhythmicPercussion(beatInterval, genome, baseFreq) {\n    try {\n      if (!this.audioContext) return;\n      const frequencies = [baseFreq * 1, baseFreq * 1.5, baseFreq * 2, baseFreq * 2.5];\n      const detuneValues = [];\n      for (let i = 0; i < 4; i++) {\n        const startPos = i * 5;\n        const genomeSlice = genome.substring(startPos, startPos + 5);\n        const detune = Math.abs(this.hashCode(genomeSlice)) % 20 - 10;\n        detuneValues.push(detune);\n      }\n      for (let i = 0; i < frequencies.length; i++) {\n        const osc = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        osc.type = i % 2 === 0 ? 'sine' : 'triangle';\n        osc.frequency.value = frequencies[i];\n        osc.detune.value = detuneValues[i];\n\n        // Start with lower gain and fade in\n        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n        gainNode.gain.linearRampToValueAtTime(0.04 - i * 0.005, this.audioContext.currentTime + 1);\n\n        // Keep volume stable - don't schedule fadeout\n\n        const lfo = this.audioContext.createOscillator();\n        const lfoGain = this.audioContext.createGain();\n        lfo.frequency.value = 0.05 + i * 0.02;\n        lfoGain.gain.value = 0.02;\n        lfo.connect(lfoGain);\n        lfoGain.connect(gainNode.gain);\n        osc.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        osc.start();\n        lfo.start();\n\n        // Don't schedule automatic stops\n\n        this.oscillators.push(osc, lfo);\n        this.gainNodes.push(gainNode, lfoGain);\n      }\n      console.log('Evolving pad created for continuous playback');\n    } catch (error) {\n      console.error('Error creating evolving pad:', error);\n    }\n  }\n  lcm(a, b) {\n    return a * b / this.gcd(a, b);\n  }\n  gcd(a, b) {\n    return b === 0 ? a : this.gcd(b, a % b);\n  }\n  stopAll() {\n    // Clear any maximum duration timeout\n    if (this.maxDurationTimeout) {\n      clearTimeout(this.maxDurationTimeout);\n      this.maxDurationTimeout = null;\n    }\n    if (this.oscillators && this.oscillators.length > 0) {\n      console.log('Stopping', this.oscillators.length, 'oscillators');\n      const currentTime = this.audioContext ? this.audioContext.currentTime : 0;\n      for (let i = 0; i < this.oscillators.length; i++) {\n        try {\n          // If we have gain nodes, fade them out quickly\n          if (this.gainNodes && this.gainNodes[i]) {\n            try {\n              this.gainNodes[i].gain.setValueAtTime(this.gainNodes[i].gain.value, currentTime);\n              this.gainNodes[i].gain.linearRampToValueAtTime(0, currentTime + 0.1);\n            } catch (e) {\n              console.warn('Error fading out gain node:', e);\n            }\n          }\n\n          // Schedule stop for the oscillator\n          this.oscillators[i].stop(currentTime + 0.2);\n          setTimeout(() => {\n            try {\n              this.oscillators[i].disconnect();\n            } catch (e) {\n              // Ignore - already disconnected\n            }\n          }, 250);\n        } catch (e) {\n          console.warn('Error stopping oscillator:', e);\n        }\n      }\n      this.oscillators = [];\n      this.gainNodes = [];\n    }\n    if (this.rhythmIntervals && this.rhythmIntervals.length > 0) {\n      console.log('Clearing', this.rhythmIntervals.length, 'rhythm intervals');\n      for (let i = 0; i < this.rhythmIntervals.length; i++) {\n        clearInterval(this.rhythmIntervals[i]);\n      }\n      this.rhythmIntervals = [];\n    }\n    this.isGenomeAudioPlaying = false;\n    try {\n      this.hitSound.pause();\n      this.scoreSound.pause();\n      this.loadSound.pause();\n      this.gameOverSound.pause();\n      this.introSound.pause();\n    } catch (e) {\n      console.warn('Error stopping sound effects:', e);\n    }\n  }\n  stopGenomeAudio() {\n    this.stopAll();\n  }\n  playHitSound() {\n    return this.playWithErrorHandling(() => {\n      this.hitSound.currentTime = 0;\n      return this.hitSound.play().catch(err => {\n        console.warn('Hit sound playback error:', err);\n        if (err.name === 'NotAllowedError') {\n          // Needs user interaction - could show UI hint\n          console.info('Audio playback requires user interaction first');\n        }\n        throw err; // Re-throw to be caught by playWithErrorHandling\n      });\n    }, 'Hit sound failed');\n  }\n  playScoreSound() {\n    return this.playWithErrorHandling(() => {\n      this.scoreSound.currentTime = 0;\n      return this.scoreSound.play().catch(err => {\n        console.warn('Score sound playback error:', err);\n        throw err;\n      });\n    }, 'Score sound failed');\n  }\n  playLoadSound() {\n    return this.playWithErrorHandling(() => {\n      this.loadSound.currentTime = 0;\n      return this.loadSound.play().catch(err => {\n        console.warn('Load sound playback error:', err);\n        throw err;\n      });\n    }, 'Load sound failed');\n  }\n  playGameOverSound() {\n    return this.playWithErrorHandling(() => {\n      this.gameOverSound.currentTime = 0;\n      return this.gameOverSound.play().catch(err => {\n        console.warn('Game over sound playback error:', err);\n        throw err;\n      });\n    }, 'Game over sound failed');\n  }\n  playIntroSound() {\n    return this.playWithErrorHandling(() => {\n      this.introSound.currentTime = 0;\n      return this.introSound.play().catch(err => {\n        console.warn('Intro sound playback error:', err);\n        throw err;\n      });\n    }, 'Intro sound failed');\n  }\n  hashCode(str) {\n    if (!str || str.length === 0) return 0;\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash;\n    }\n    return hash;\n  }\n  initializeOnUserInteraction() {\n    if (this.initialized) {\n      console.log('Sound Manager already initialized');\n      return Promise.resolve();\n    }\n    console.log('Initializing Sound Manager on user interaction');\n    return this.init().then(() => {\n      // Unlock audio context first\n      if (this.audioContext && this.audioContext.state === 'suspended') {\n        this.audioContext.resume();\n      }\n\n      // Better approach: Create and play a silent audio buffer to unlock audio\n      try {\n        const buffer = this.audioContext.createBuffer(1, 1, 22050);\n        const source = this.audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(this.audioContext.destination);\n        source.start(0);\n\n        // Don't try to use play/pause for unlocking as it causes AbortError\n        console.log('Audio context unlocked with buffer source');\n        return Promise.resolve();\n      } catch (e) {\n        console.warn('Could not unlock audio context with buffer, falling back', e);\n        return Promise.resolve();\n      }\n    });\n  }\n}\nexport default new SoundManager();","map":{"version":3,"names":["SoundManager","constructor","hitSound","Audio","scoreSound","loadSound","gameOverSound","introSound","audioContext","oscillators","gainNodes","rhythmIntervals","defaultGenome","isGenomeAudioPlaying","initialized","init","console","log","Promise","resolve","window","AudioContext","webkitAudioContext","state","resume","catch","e","warn","silentBuffer","createBuffer","silentSource","createBufferSource","buffer","connect","destination","start","error","ensureAudioContext","playWithErrorHandling","playFunction","fallbackMessage","startBackgroundMusic","startGenomeAudio","genome","then","createRhythmicSound","setMaxPlaybackDuration","durationMs","shouldAutoStop","maxDurationTimeout","clearTimeout","setTimeout","stopAll","startSimpleGenomeAudio","baseFreq","Math","abs","hashCode","tempoFactor","substring","beatInterval","mainSequence","generateLongerSequence","bassSequence","split","reverse","join","accentSequence","length","patternLength","lcm","currentBeat","mainRhythmInterval","setInterval","clearInterval","mainIndex","mainNote","volume","playNote","frequency","duration","bassBeat","bassRhythmInterval","bassIndex","bassNote","accentBeat","accentRhythmInterval","accentIndex","accentNote","push","createBassDrone","createRhythmicPercussion","sequence","possibleFrequencies","extendedGenome","i","char1","charCodeAt","char2","char3","freqIndex","durationOptions","durIndex","waveType","maxDuration","min","max","safeVolume","osc","createOscillator","gainNode","createGain","type","value","gain","setValueAtTime","currentTime","linearRampToValueAtTime","toFixed","startTime","stopTime","stop","onended","disconnect","err","frequencies","detuneValues","startPos","genomeSlice","detune","lfo","lfoGain","a","b","gcd","pause","stopGenomeAudio","playHitSound","play","name","info","playScoreSound","playLoadSound","playGameOverSound","playIntroSound","str","hash","char","initializeOnUserInteraction","source"],"sources":["/home/praise/pong-it/frontend/src/utils/soundManager.js"],"sourcesContent":["class SoundManager {\n  constructor() {\n    this.hitSound = new Audio('/sounds/hit2.mp3');\n    this.scoreSound = new Audio('/sounds/score2.mp3');\n    this.loadSound = new Audio('/sounds/load2.mp3');\n    this.gameOverSound = new Audio('/sounds/gameover3.mp3');\n    this.introSound = new Audio('/sounds/intro2.mp3');\n    \n    this.audioContext = null;\n    this.oscillators = [];\n    this.gainNodes = [];\n    this.rhythmIntervals = [];\n    \n    this.defaultGenome = \"aslkajd asklja lskj ask aslkj aldka lskdjaslkdj \";\n    \n    this.isGenomeAudioPlaying = false;\n    this.initialized = false;\n  }\n\n  init() {\n    console.log('Initializing SoundManager');\n    \n    if (this.initialized) {\n      console.log('Already initialized');\n      return Promise.resolve();\n    }\n    \n    return new Promise((resolve) => {\n      try {\n        // Create audio context if it doesn't exist\n        if (!this.audioContext) {\n          console.log('Creating new AudioContext');\n          this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        }\n        \n        if (this.audioContext.state === 'suspended') {\n          console.log('AudioContext suspended, attempting to resume');\n          this.audioContext.resume().catch(e => {\n            console.warn('Could not resume audio context:', e);\n          });\n        }\n        \n        console.log('Audio context created:', this.audioContext.state);\n        \n        // Load audio files silently without playing them\n        console.log('Loading audio files');\n        \n        // This prevents the \"play() request was interrupted\" error\n        const silentBuffer = this.audioContext.createBuffer(1, 1, 22050);\n        const silentSource = this.audioContext.createBufferSource();\n        silentSource.buffer = silentBuffer;\n        silentSource.connect(this.audioContext.destination);\n        silentSource.start();\n        \n        this.initialized = true;\n        console.log('Sound Manager initialized successfully');\n        resolve();\n      } catch (e) {\n        console.error('Failed to initialize audio context:', e);\n        this.initialized = false; // Mark as not initialized so we can try again\n        resolve(); // Resolve anyway to avoid blocking\n      }\n    });\n  }\n\n  ensureAudioContext() {\n    console.log('Ensuring audio context');\n    \n    if (!this.audioContext) {\n      try {\n        console.log('Creating new AudioContext');\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      } catch (e) {\n        console.error('Failed to create audio context:', e);\n        return null;\n      }\n    }\n    \n    if (this.audioContext.state === 'suspended') {\n      console.log('AudioContext suspended, attempting to resume');\n      this.audioContext.resume().catch(e => {\n        console.error('Failed to resume audio context:', e);\n      });\n    }\n    \n    console.log('Audio context state:', this.audioContext.state);\n    return this.audioContext;\n  }\n\n  async playWithErrorHandling(playFunction, fallbackMessage = '') {\n    try {\n      if (!this.initialized) {\n        await this.init();\n      }\n      \n      // Ensure audio context is running\n      this.ensureAudioContext();\n      \n      await playFunction();\n    } catch (error) {\n      console.warn(`Sound playback failed: ${fallbackMessage}`, error);\n    }\n  }\n\n  startBackgroundMusic() {\n    this.startGenomeAudio(this.defaultGenome);\n  }\n\n  startGenomeAudio(genome = null) {\n    console.log('Starting genome audio, initialized:', this.initialized);\n    if (!this.initialized) {\n      console.log('Initializing sound manager before playing genome audio');\n      return this.init().then(() => {\n        this.isGenomeAudioPlaying = true; // Make sure to set this flag\n        return this.createRhythmicSound(genome || this.defaultGenome);\n      });\n    }\n    this.isGenomeAudioPlaying = true; // Explicitly set the flag\n    return this.createRhythmicSound(genome || this.defaultGenome);\n  }\n\n  // Control maximum playback duration\n  setMaxPlaybackDuration(durationMs = 30000, shouldAutoStop = false) {\n    // Stop any existing timeout\n    if (this.maxDurationTimeout) {\n      clearTimeout(this.maxDurationTimeout);\n      this.maxDurationTimeout = null;\n    }\n    \n    // Only set the timeout if shouldAutoStop is true\n    if (shouldAutoStop) {\n      console.log(`Setting maximum playback duration: ${durationMs}ms`);\n      this.maxDurationTimeout = setTimeout(() => {\n        console.log(`Maximum playback duration (${durationMs}ms) reached, stopping sounds`);\n        this.stopAll();\n      }, durationMs);\n    } else {\n      console.log('Continuous playback enabled - no automatic stop');\n    }\n  }\n\n  startSimpleGenomeAudio(genome = null) {\n    this.isGenomeAudioPlaying = true; // Make sure the flag is set\n    return this.createRhythmicSound(genome || this.defaultGenome);\n  }\n\n  createRhythmicSound(genome) {\n    try {\n      this.stopAll();\n      \n      console.log('AudioContext before ensuring:', this.audioContext ? this.audioContext.state : 'none');\n      if (!this.ensureAudioContext()) {\n        console.error('Failed to ensure audio context');\n        return;\n      }\n      console.log('AudioContext after ensuring:', this.audioContext.state);\n      \n      // Make sure we set this flag early\n      this.isGenomeAudioPlaying = true;\n      \n      console.log('Creating rhythmic sound with genome:', genome);\n      \n      const baseFreq = 80 + (Math.abs(this.hashCode(genome)) % 80);\n      console.log('Base frequency:', baseFreq);\n      \n      const tempoFactor = 0.3 + (Math.abs(this.hashCode(genome.substring(0, 10))) % 0.2);\n      const beatInterval = 300 * tempoFactor;\n      console.log('Beat interval:', beatInterval);\n      \n      const mainSequence = this.generateLongerSequence(genome, 16);\n      const bassSequence = this.generateLongerSequence(genome.split('').reverse().join(''), 12);\n      const accentSequence = this.generateLongerSequence(genome.substring(5) + genome.substring(0, 5), 10);\n      \n      console.log('Main sequence length:', mainSequence.length);\n      console.log('Bass sequence length:', bassSequence.length);\n      console.log('Accent sequence length:', accentSequence.length);\n      \n      const patternLength = this.lcm(\n        this.lcm(mainSequence.length, bassSequence.length), \n        accentSequence.length\n      );\n      \n      console.log('Total pattern length (beats):', patternLength);\n      console.log('Pattern duration (seconds):', (patternLength * beatInterval) / 1000);\n      \n      // Set maximum duration for the generated sound but DON'T auto-stop\n      // Pass false as second parameter to indicate no auto-stop\n      this.setMaxPlaybackDuration(30000, false);\n      \n      let currentBeat = 0;\n      const mainRhythmInterval = setInterval(() => {\n        // Debug log every 10 beats\n        if (currentBeat % 10 === 0) {\n          console.log('Main rhythm beat:', currentBeat, 'isPlaying:', this.isGenomeAudioPlaying);\n        }\n        \n        if (!this.isGenomeAudioPlaying) {\n          console.log('Stopping main rhythm - isPlaying flag false');\n          clearInterval(mainRhythmInterval);\n          return;\n        }\n        \n        const mainIndex = currentBeat % mainSequence.length;\n        const mainNote = mainSequence[mainIndex];\n        \n        if (mainNote.volume > 0) {\n          this.playNote(\n            baseFreq * mainNote.frequency, \n            mainNote.duration * beatInterval * 0.85,\n            mainNote.volume,\n            'triangle'\n          );\n        }\n        \n        currentBeat++;\n      }, beatInterval);\n      \n      let bassBeat = 0;\n      const bassRhythmInterval = setInterval(() => {\n        if (!this.isGenomeAudioPlaying) {\n          clearInterval(bassRhythmInterval);\n          return;\n        }\n        \n        const bassIndex = bassBeat % bassSequence.length;\n        const bassNote = bassSequence[bassIndex];\n        \n        if (bassNote.volume > 0) {\n          this.playNote(\n            (baseFreq * 0.75) * bassNote.frequency, \n            bassNote.duration * beatInterval * 0.9,\n            bassNote.volume * 1.2,\n            'sine'\n          );\n        }\n        \n        bassBeat++;\n      }, beatInterval * 1.5);\n      \n      let accentBeat = 0;\n      const accentRhythmInterval = setInterval(() => {\n        if (!this.isGenomeAudioPlaying) {\n          clearInterval(accentRhythmInterval);\n          return;\n        }\n        \n        const accentIndex = accentBeat % accentSequence.length;\n        const accentNote = accentSequence[accentIndex];\n        \n        if (accentNote.volume > 0.15) {\n          this.playNote(\n            baseFreq * 1.5 * accentNote.frequency,\n            accentNote.duration * beatInterval * 0.4,\n            accentNote.volume * 0.9,\n            'square'\n          );\n        }\n        \n        accentBeat++;\n      }, beatInterval * 2);\n      \n      this.rhythmIntervals.push(mainRhythmInterval, bassRhythmInterval, accentRhythmInterval);\n      \n      this.createBassDrone(baseFreq * 0.5);\n      \n      this.createRhythmicPercussion(beatInterval, genome, baseFreq);\n      \n      console.log('Faster rhythmic genome audio started successfully');\n    } catch (error) {\n      console.error('Error creating rhythmic sound:', error);\n    }\n  }\n\n  generateLongerSequence(genome, length = 16) {\n    const sequence = [];\n    const possibleFrequencies = [0.5, 0.66, 0.75, 0.8, 1, 1.125, 1.25, 1.33, 1.5];\n    \n    let extendedGenome = genome;\n    while (extendedGenome.length < length * 3) {\n      extendedGenome += genome;\n    }\n    \n    for (let i = 0; i < length * 2; i += 2) {\n      if (i + 1 >= extendedGenome.length) break;\n      \n      const char1 = extendedGenome.charCodeAt(i % extendedGenome.length);\n      const char2 = extendedGenome.charCodeAt((i + 1) % extendedGenome.length);\n      const char3 = extendedGenome.charCodeAt((i + 2) % extendedGenome.length);\n      \n      const freqIndex = char1 % possibleFrequencies.length;\n      const frequency = possibleFrequencies[freqIndex];\n      \n      const durationOptions = [0.5, 1, 1.5];\n      const durIndex = char2 % durationOptions.length;\n      const duration = durationOptions[durIndex];\n      \n      const volume = (char3 % 100) < 15 ? 0 : (0.1 + ((char1 + char2) % 25) / 100);\n      \n      sequence.push({ frequency, duration, volume });\n      \n      if (sequence.length >= length) break;\n    }\n    \n    while (sequence.length < length) {\n      sequence.push({ frequency: 1, duration: 1, volume: 0.2 });\n    }\n    \n    return sequence;\n  }\n\n  playNote(frequency, duration, volume, waveType = 'triangle') {\n    try {\n      if (!this.audioContext) {\n        console.error('No audio context available for playNote');\n        return;\n      }\n      \n      // Limit maximum duration of any single note to 3 seconds, but don't go below 100ms\n      const maxDuration = Math.min(3000, Math.max(100, duration));\n      \n      // Use safer volume levels\n      const safeVolume = Math.min(0.4, Math.max(0.05, volume));\n      \n      const osc = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n      \n      osc.type = waveType;\n      osc.frequency.value = frequency;\n      \n      // Simpler gain envelope\n      gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(safeVolume, this.audioContext.currentTime + 0.01);\n      gainNode.gain.setValueAtTime(safeVolume, this.audioContext.currentTime + (maxDuration - 50) / 1000);\n      gainNode.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + maxDuration / 1000);\n      \n      osc.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      \n      console.log(`Playing note: freq=${frequency.toFixed(1)}, dur=${maxDuration}ms, vol=${safeVolume.toFixed(2)}`);\n      \n      const startTime = this.audioContext.currentTime;\n      const stopTime = startTime + (maxDuration + 50) / 1000;\n      \n      osc.start(startTime);\n      osc.stop(stopTime);\n      \n      osc.onended = () => {\n        try {\n          osc.disconnect();\n          gainNode.disconnect();\n        } catch (err) {\n          // Already disconnected, ignore\n        }\n      };\n      \n      return { osc, gainNode };\n    } catch (error) {\n      console.error('Error playing note:', error);\n      return null;\n    }\n  }\n\n  createBassDrone(frequency) {\n    try {\n      if (!this.audioContext) return;\n      \n      const osc = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n      \n      osc.type = 'sine';\n      osc.frequency.value = frequency;\n      \n      // Start with low gain and ramp up for smoother transition\n      gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.06, this.audioContext.currentTime + 1);\n      \n      // Keep constant volume after initial ramp-up instead of auto-stopping\n      gainNode.gain.setValueAtTime(0.06, this.audioContext.currentTime + 20);\n      \n      osc.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      \n      osc.start();\n      \n      // Don't schedule automatic stop - will be stopped when game ends\n      \n      this.oscillators.push(osc);\n      this.gainNodes.push(gainNode);\n      \n      console.log('Bass drone created at frequency:', frequency);\n    } catch (error) {\n      console.error('Error creating bass drone:', error);\n    }\n  }\n\n  createRhythmicPercussion(beatInterval, genome, baseFreq) {\n    try {\n      if (!this.audioContext) return;\n      \n      const frequencies = [\n        baseFreq * 1,\n        baseFreq * 1.5,\n        baseFreq * 2,\n        baseFreq * 2.5\n      ];\n      \n      const detuneValues = [];\n      for (let i = 0; i < 4; i++) {\n        const startPos = i * 5;\n        const genomeSlice = genome.substring(startPos, startPos + 5);\n        const detune = Math.abs(this.hashCode(genomeSlice)) % 20 - 10;\n        detuneValues.push(detune);\n      }\n      \n      for (let i = 0; i < frequencies.length; i++) {\n        const osc = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        \n        osc.type = i % 2 === 0 ? 'sine' : 'triangle';\n        osc.frequency.value = frequencies[i];\n        osc.detune.value = detuneValues[i];\n        \n        // Start with lower gain and fade in\n        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n        gainNode.gain.linearRampToValueAtTime(0.04 - (i * 0.005), this.audioContext.currentTime + 1);\n        \n        // Keep volume stable - don't schedule fadeout\n        \n        const lfo = this.audioContext.createOscillator();\n        const lfoGain = this.audioContext.createGain();\n        \n        lfo.frequency.value = 0.05 + (i * 0.02);\n        lfoGain.gain.value = 0.02;\n        \n        lfo.connect(lfoGain);\n        lfoGain.connect(gainNode.gain);\n        \n        osc.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        \n        osc.start();\n        lfo.start();\n        \n        // Don't schedule automatic stops\n        \n        this.oscillators.push(osc, lfo);\n        this.gainNodes.push(gainNode, lfoGain);\n      }\n      \n      console.log('Evolving pad created for continuous playback');\n    } catch (error) {\n      console.error('Error creating evolving pad:', error);\n    }\n  }\n\n  lcm(a, b) {\n    return (a * b) / this.gcd(a, b);\n  }\n\n  gcd(a, b) {\n    return b === 0 ? a : this.gcd(b, a % b);\n  }\n\n  stopAll() {\n    // Clear any maximum duration timeout\n    if (this.maxDurationTimeout) {\n      clearTimeout(this.maxDurationTimeout);\n      this.maxDurationTimeout = null;\n    }\n    \n    if (this.oscillators && this.oscillators.length > 0) {\n      console.log('Stopping', this.oscillators.length, 'oscillators');\n      \n      const currentTime = this.audioContext ? this.audioContext.currentTime : 0;\n      \n      for (let i = 0; i < this.oscillators.length; i++) {\n        try {\n          // If we have gain nodes, fade them out quickly\n          if (this.gainNodes && this.gainNodes[i]) {\n            try {\n              this.gainNodes[i].gain.setValueAtTime(this.gainNodes[i].gain.value, currentTime);\n              this.gainNodes[i].gain.linearRampToValueAtTime(0, currentTime + 0.1);\n            } catch (e) {\n              console.warn('Error fading out gain node:', e);\n            }\n          }\n          \n          // Schedule stop for the oscillator\n          this.oscillators[i].stop(currentTime + 0.2);\n          setTimeout(() => {\n            try {\n              this.oscillators[i].disconnect();\n            } catch (e) {\n              // Ignore - already disconnected\n            }\n          }, 250);\n        } catch (e) {\n          console.warn('Error stopping oscillator:', e);\n        }\n      }\n      \n      this.oscillators = [];\n      this.gainNodes = [];\n    }\n    \n    if (this.rhythmIntervals && this.rhythmIntervals.length > 0) {\n      console.log('Clearing', this.rhythmIntervals.length, 'rhythm intervals');\n      \n      for (let i = 0; i < this.rhythmIntervals.length; i++) {\n        clearInterval(this.rhythmIntervals[i]);\n      }\n      \n      this.rhythmIntervals = [];\n    }\n    \n    this.isGenomeAudioPlaying = false;\n    \n    try {\n      this.hitSound.pause();\n      this.scoreSound.pause();\n      this.loadSound.pause();\n      this.gameOverSound.pause();\n      this.introSound.pause();\n    } catch (e) {\n      console.warn('Error stopping sound effects:', e);\n    }\n  }\n\n  stopGenomeAudio() {\n    this.stopAll();\n  }\n\n  playHitSound() {\n    return this.playWithErrorHandling(\n      () => {\n        this.hitSound.currentTime = 0;\n        return this.hitSound.play()\n          .catch(err => {\n            console.warn('Hit sound playback error:', err);\n            if (err.name === 'NotAllowedError') {\n              // Needs user interaction - could show UI hint\n              console.info('Audio playback requires user interaction first');\n            }\n            throw err; // Re-throw to be caught by playWithErrorHandling\n          });\n      },\n      'Hit sound failed'\n    );\n  }\n\n  playScoreSound() {\n    return this.playWithErrorHandling(\n      () => {\n        this.scoreSound.currentTime = 0;\n        return this.scoreSound.play()\n          .catch(err => {\n            console.warn('Score sound playback error:', err);\n            throw err;\n          });\n      },\n      'Score sound failed'\n    );\n  }\n\n  playLoadSound() {\n    return this.playWithErrorHandling(\n      () => {\n        this.loadSound.currentTime = 0;\n        return this.loadSound.play()\n          .catch(err => {\n            console.warn('Load sound playback error:', err);\n            throw err;\n          });\n      },\n      'Load sound failed'\n    );\n  }\n\n  playGameOverSound() {\n    return this.playWithErrorHandling(\n      () => {\n        this.gameOverSound.currentTime = 0;\n        return this.gameOverSound.play()\n          .catch(err => {\n            console.warn('Game over sound playback error:', err);\n            throw err;\n          });\n      },\n      'Game over sound failed'\n    );\n  }\n\n  playIntroSound() {\n    return this.playWithErrorHandling(\n      () => {\n        this.introSound.currentTime = 0;\n        return this.introSound.play()\n          .catch(err => {\n            console.warn('Intro sound playback error:', err);\n            throw err;\n          });\n      },\n      'Intro sound failed'\n    );\n  }\n  \n  hashCode(str) {\n    if (!str || str.length === 0) return 0;\n    \n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return hash;\n  }\n\n  initializeOnUserInteraction() {\n    if (this.initialized) {\n      console.log('Sound Manager already initialized');\n      return Promise.resolve();\n    }\n    \n    console.log('Initializing Sound Manager on user interaction');\n    return this.init().then(() => {\n      // Unlock audio context first\n      if (this.audioContext && this.audioContext.state === 'suspended') {\n        this.audioContext.resume();\n      }\n      \n      // Better approach: Create and play a silent audio buffer to unlock audio\n      try {\n        const buffer = this.audioContext.createBuffer(1, 1, 22050);\n        const source = this.audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(this.audioContext.destination);\n        source.start(0);\n        \n        // Don't try to use play/pause for unlocking as it causes AbortError\n        console.log('Audio context unlocked with buffer source');\n        return Promise.resolve();\n      } catch (e) {\n        console.warn('Could not unlock audio context with buffer, falling back', e);\n        return Promise.resolve();\n      }\n    });\n  }\n}\n\nexport default new SoundManager(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}